{
	"$schema" : "http://json-schema.org/draft-04/schema#",
  "properties": {
    "xsl:stylesheet": {
      "properties": {
        "xsl:template": {
          "items": {
            "additionalProperties": {
              "$ref": "#/definitions/shorthand_element_name"
            },
            "properties": {
              "@match": {
                "description": "A pattern that identifies the source node or nodes to which the rule applies. The match attribute is required unless the <xsl:template> element has a name attribute. The content of the <xsl:template> element is the template that is instantiated when the template rule is applied.",
                "type": "string"
              },
              "@name": {
                "description": "The Qualified Name (QName) to be expanded. If it has a prefix, the prefix is expanded into a Uniform Resource Identifier (URI) reference using the namespace declarations in effect on the attribute in which the name occurs. The expanded-name, consisting of the local part of the name and the possibly null URI reference is used as the name of the template. The default namespace is not used for unprefixed names. If an <xsl:template> element has a name attribute, it can, but need not, also have a match attribute.",
                "type": "string"
              },
              "@mode": {
                "description": "The mode value. This value allows an element to be processed multiple times, each time producing a different result. If <xsl:template> does not have a match attribute, it must not have a mode attribute. If an <xsl:apply-templates> element has a mode attribute, it applies only to those template rules from <xsl:template> elements that have a mode attribute with the same value; if an <xsl:apply-templates> element does not have a mode attribute, it applies only to those template rules from <xsl:template> elements that do not have a mode attribute.",
                "type": "string"
              },
              "@priority": {
                "description": "The priority number for the template. All matching template rules that have lower priority than the matching template rule or rules with the highest priority are eliminated from consideration. The value of this must be a real number from 0-9, positive or negative, matching the production number with an optional leading minus sign (-). The default priority is computed as follows:",
                "type": "integer"
              },
              "xsl:choose": {
                "$ref": "#/definitions/xsl%3Achoose"
              },
              "xsl:apply-templates": {
                "$ref": "#/definitions/xsl%3Aapply-templates"
              },
              "xsl:element": {
                "$ref": "#/definitions/xsl%3Aelement"
              },
              "xsl:param": {
                "$ref": "#/definitions/xsl%3Aparam"
              },
              "xsl:call-template": {
                "$ref": "#/definitions/xsl%3Acall-template"
              }
            },
            "type": "object"
          },
          "description": "Defines a reusable template for generating the desired output for nodes of a particular type and context.",
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "description": "RootNode",
  "type": "object",
  "definitions": {
    "xsl:apply-templates": {
      "items": {
        "properties": {
          "@mode": { "type": "string" },
          "select": { "type": "string" }
        }
      },
      "type": "object"
    },
    "xsl:value-of": {
      "properties": {
        "@select": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "xsl:element": {
      "items": {
        "additionalProperties": {
          "$ref": "#/definitions/shorthand_element_name"
        },
        "properties": {
          "@name": {
            "type": "string"
          },
          "xsl:value-of": {
            "$ref": "#/definitions/xsl%3Avalue-of"
          },
          "xsl:attribute": {
            "$ref": "#/definitions/xsl%3Aattribute"
          },
          "xsl:choose": {
            "$ref": "#/definitions/xsl%3Achoose"
          },
          "xsl:element": {
            "$ref": "#/definitions/xsl%3Aelement"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "xsl:attribute": {
      "items": {
        "properties": {
          "@name": {
            "type": "string"
          },
          "xsl:value-of": {
            "$ref": "#/definitions/xsl%3Avalue-of"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "xsl:choose": {
      "items": {
        "properties": {
          "xsl:when": {
            "items": {
              "additionalProperties": {
                "$ref": "#/definitions/shorthand_element_name"
              },
              "properties": {
                "@test": { "type": "string" },

                "xsl:element": {
                  "$ref": "#/definitions/xsl%3Aelement"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "xsl:otherwise": {
            "items": {
              "properties": {
                "@test": { "type": "string" },
                "xsl:element": {
                  "$ref": "#/definitions/xsl%3Aelement"
                }
              },
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "xsl:variable": {
      "items": {
        "additionalProperties": {
          "$ref": "#/definitions/shorthand_element_name"
        },
        "properties": {
          "@name": { "type": "string" },
          "@select": { "type": "string" },
          "xsl:value-of": {
            "$ref": "#/definitions/xsl%3Avalue-of"
          },
          "xsl:attribute": {
            "$ref": "#/definitions/xsl%3Aattribute"
          },
          "xsl:choose": {
            "$ref": "#/definitions/xsl%3Achoose"
          },
          "xsl:element": {
            "$ref": "#/definitions/xsl%3Aelement"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "xsl:param": {
      "items": {
        "properties": {
          "@name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "xsl:with-param": {
      "items": {
        "properties": {
          "@name": {
            "type": "string"
          },
          "@select": {
            "type": "string"
          },
          "xsl:value-of": {
            "$ref": "#/definitions/xsl%3Avalue-of"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "xsl:call-template": {
      "items": {
        "properties": {
          "@name": {
            "type": "string"
          },
          "xsl:with-param": {
            "$ref":  "#/definitions/xsl%3Awith-param"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "shorthand_element_name": {
      "additionalProperties": {
        "$ref": "#/definitions/shorthand_element_name"
      },
      "properties": {
        "xsl:value-of": {
          "$ref": "#/definitions/xsl%3Avalue-of"
        },
        "@any_custom_attribute_like_class_margin_padding_etc": {
          "type": "string"
        },
        "xsl:attribute": {
          "$ref": "#/definitions/xsl%3Aattribute"
        },
        "xsl:choose": {
          "$ref": "#/definitions/xsl%3Achoose"
        },
        "xsl:element": {
          "$ref": "#/definitions/xsl%3Aelement"
        }
      },
      "type": [ "object", "string" ]
    }
  }
}